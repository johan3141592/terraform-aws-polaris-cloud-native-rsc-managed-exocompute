resource "aws_vpc" "rsc_exocompute" {
  cidr_block = var.aws_exocompute_vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "Rubrik Exocompute VPC"
  }
  
}

resource "aws_subnet" "rsc_exocompute_public" {
  vpc_id     = aws_vpc.rsc_exocompute.id
  cidr_block = var.aws_exocompute_public_subnet_cidr
  availability_zone = "${data.aws_region.current.name}a"
  map_public_ip_on_launch = true

  tags = {
    Name = "Rubrik Exocompute Public Subnet"
  }
}

resource "aws_subnet" "rsc_exocompute_subnet_1" {
  vpc_id     = aws_vpc.rsc_exocompute.id
  cidr_block = var.aws_exocompute_subnet_1_cidr
  availability_zone = "${data.aws_region.current.name}a"
  map_public_ip_on_launch = false


  tags = {
    Name = "Rubrik Exocompute Subnet 1"
  }
}

resource "aws_subnet" "rsc_exocompute_subnet_2" {
  vpc_id     = aws_vpc.rsc_exocompute.id
  cidr_block = var.aws_exocompute_subnet_2_cidr
  availability_zone = "${data.aws_region.current.name}b"
  map_public_ip_on_launch = false

  tags = {
    Name = "Rubrik Exocompute Subnet 1"
  }
}

resource "aws_eip" "rsc_exocompute_nat_eip" {
  domain = "vpc"
  
  
  tags = {
    Name = "Rubrik Exocompute NAT EIP"
  }
}

resource "aws_internet_gateway" "rsc_exocompute" {
  vpc_id = aws_vpc.rsc_exocompute.id

  tags = {
    Name = "Rubrik Exocompute Internet Gateway"
  }
}

resource "aws_nat_gateway" "rsc_exocompute" {
  allocation_id = aws_eip.rsc_exocompute_nat_eip.id
  subnet_id     = aws_subnet.rsc_exocompute_public.id

  tags = {
    Name = "Rubrik Exocompute NAT Gateway"
  }

  # To ensure proper ordering, it is recommended to add an explicit dependency
  # on the Internet Gateway for the VPC.
  depends_on = [aws_internet_gateway.rsc_exocompute]
}

resource "aws_route_table" "rsc_exocompute_private" {
  vpc_id = aws_vpc.rsc_exocompute.id

  tags = {
    Name = "Rubrik Exocompute Private Route Table"
  }
}

resource "aws_route_table" "rsc_exocompute_public" {
  vpc_id = aws_vpc.rsc_exocompute.id

  tags = {
    Name = "Rubrik Exocompute Public Route Table"
  }
}

resource "aws_route" "rsc_exocompute_public_internet_gateway" {
  route_table_id         = aws_route_table.rsc_exocompute_public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.rsc_exocompute.id
}

resource "aws_route" "rsc_exocompute_private_nat_gateway" {
  route_table_id         = aws_route_table.rsc_exocompute_private.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.rsc_exocompute.id
}

resource "aws_route_table_association" "rsc_exocompute_public" {
  subnet_id      = aws_subnet.rsc_exocompute_public.id
  route_table_id = aws_route_table.rsc_exocompute_public.id
}

resource "aws_route_table_association" "rsc_exocompute_private_1" {
  subnet_id      = aws_subnet.rsc_exocompute_subnet_1.id
  route_table_id = aws_route_table.rsc_exocompute_private.id
}


resource "aws_route_table_association" "rsc_exocompute_private_2" {
  subnet_id      = aws_subnet.rsc_exocompute_subnet_2.id
  route_table_id = aws_route_table.rsc_exocompute_private.id
}

resource "aws_security_group" "default" {
  name        = "Rubrik-Exocompute-sg"
  description = "Security group to allow inbound/outbound from the Rubrik Exocompute VPC"
  vpc_id      = aws_vpc.rsc_exocompute.id
  depends_on  = [aws_vpc.rsc_exocompute]
  ingress {
    from_port = "0"
    to_port   = "0"
    protocol  = "-1"
    self      = true
  }
  
  egress {
    from_port = "0"
    to_port   = "0"
    protocol  = "-1"
    self      = "true"
  }

  tags = {
    Name = "Rubrik Exocompute Security Group"
  }
}